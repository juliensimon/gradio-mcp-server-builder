"""
Gradio MCP Server

Generated by gradio-mcp-server-builder
Copyright (c) 2025 Julien Simon <julien@julien.org>
Licensed under CC BY-NC 4.0: https://creativecommons.org/licenses/by-nc/4.0/
"""

from datetime import datetime
from datetime import datetime, timedelta
from typing import Dict, List
from typing import List, Dict
from typing import List, Dict, Optional
import gradio as gr
import json
import os
import re

# Module constants
DUMMY_TASKS = [
    {
        "id": 1,
        "title": "Implement user authentication system",
        "description": "Add login and registration functionality with JWT tokens",
        "priority": "high",
        "status": "in_progress",
        "created_at": "2024-01-15T10:00:00",
        "updated_at": "2024-01-20T14:30:00"
    },
    {
        "id": 2,
        "title": "Fix navigation menu bug",
        "description": "Menu items not displaying correctly on mobile devices",
        "priority": "medium",
        "status": "done",
        "created_at": "2024-01-16T09:15:00",
        "updated_at": "2024-01-18T16:45:00"
    },
    {
        "id": 3,
        "title": "Create landing page design",
        "description": "Design mockups for new homepage with modern UI",
        "priority": "low",
        "status": "todo",
        "created_at": "2024-01-17T11:30:00",
        "updated_at": "2024-01-17T11:30:00"
    },
    {
        "id": 4,
        "title": "Setup CI/CD pipeline",
        "description": "Configure automated testing and deployment workflows",
        "priority": "high",
        "status": "done",
        "created_at": "2024-01-18T08:00:00",
        "updated_at": "2024-01-22T17:20:00"
    },
    {
        "id": 5,
        "title": "Add search functionality",
        "description": "Implement full-text search across the platform",
        "priority": "medium",
        "status": "in_progress",
        "created_at": "2024-01-19T13:45:00",
        "updated_at": "2024-01-25T10:15:00"
    }
]

def _load_tasks() -> List[Dict]:
    """Load tasks from dummy storage."""
    return DUMMY_TASKS.copy()

def _save_tasks(tasks: List[Dict]) -> None:
    """Simulate saving tasks (no-op for dummy data)."""
    pass

def _generate_task_id() -> int:
    """Generate a unique task ID based on dummy data."""
    return len(DUMMY_TASKS) + 1

def _parse_datetime(date_str: str) -> datetime:
    """Parse ISO format datetime string."""
    return datetime.fromisoformat(date_str.replace('Z', '+00:00'))

def calculate_task_velocity(days: int = 7) -> float:
    """Calculate average tasks completed per day over specified period."""
    # Return dummy velocity data
    if days <= 7:
        return 2.3
    elif days <= 30:
        return 1.8
    else:
        return 1.5

def validate_priority(priority: str) -> bool:
    """Validate that priority is one of the allowed values."""
    return priority.lower() in ['low', 'medium', 'high']

def validate_status(status: str) -> bool:
    """Validate that status is one of the allowed values."""
    return status.lower() in ['todo', 'in_progress', 'done']

def create_task(title: str, description: str, priority: str = "medium") -> str:
    """Create a new task in the system.
    title: The task title
    description: Detailed description of the task
    priority: Task priority (low, medium, high)
    Success message with task ID"""
    new_task_id = _generate_task_id()
    return f"Task created successfully with ID: {new_task_id}"
def get_task(task_id: int) -> str:
    """Retrieve a specific task by ID.
    task_id: The unique identifier of the task
    JSON representation of the task or error message"""
    tasks = _load_tasks()
    for task in tasks:
        if task.get('id') == task_id:
            return json.dumps(task, indent=2)
    return f"Task with ID {task_id} not found"
def list_tasks(status: str = "all") -> str:
    """List all tasks, optionally filtered by status.
    status: Filter by status (all, todo, in_progress, done)
    JSON list of tasks matching the criteria"""
    tasks = _load_tasks()
    if status.lower() != "all":
        tasks = [task for task in tasks if task.get('status', '').lower() == status.lower()]
    return json.dumps(tasks, indent=2)
def update_task_status(task_id: int, status: str) -> str:
    """Update the status of a specific task.
    task_id: The unique identifier of the task
    status: New status (todo, in_progress, done)
    Success or error message"""
    tasks = _load_tasks()
    for task in tasks:
        if task.get('id') == task_id:
            return f"Task {task_id} status updated to '{status}'"
    return f"Task with ID {task_id} not found"
def delete_task(task_id: int) -> str:
    """Delete a task from the system.
    task_id: The unique identifier of the task to delete
    Success or error message"""
    tasks = _load_tasks()
    for task in tasks:
        if task.get('id') == task_id:
            return f"Task '{task['title']}' deleted successfully"
    return f"Task with ID {task_id} not found" 
def get_task_statistics() -> str:
    """Get comprehensive task statistics.
    JSON with various task metrics and counts"""
    # Return dummy statistics data
    stats = {
        "total_tasks": 25,
        "by_status": {"todo": 8, "in_progress": 5, "done": 12},
        "by_priority": {"low": 6, "medium": 13, "high": 6},
        "completion_rate": 48.0,
        "average_velocity_7_days": 2.3,
        "average_velocity_30_days": 1.8
    }
    return json.dumps(stats, indent=2)
def get_productivity_report(days: int = 7) -> str:
    """Generate a productivity report for the specified time period.
    days: Number of days to analyze (default: 7)
    JSON productivity report with insights and recommendations"""
    # Return dummy productivity report
    if days <= 7:
        report = {
            "period_days": days,
            "tasks_created": 8,
            "tasks_completed": 16,
            "tasks_in_progress": 3,
            "high_priority_completed": 4,
            "average_daily_velocity": 2.3,
            "recommendations": ["Great job! Keep up the productive work."]
        }
    elif days <= 30:
        report = {
            "period_days": days,
            "tasks_created": 35,
            "tasks_completed": 52,
            "tasks_in_progress": 5,
            "high_priority_completed": 12,
            "average_daily_velocity": 1.8,
            "recommendations": ["Consider focusing on fewer tasks to improve completion rate"]
        }
    else:
        report = {
            "period_days": days,
            "tasks_created": 89,
            "tasks_completed": 134,
            "tasks_in_progress": 7,
            "high_priority_completed": 28,
            "average_daily_velocity": 1.5,
            "recommendations": [
                "Try breaking down large tasks into smaller, manageable chunks",
                "Focus on completing high-priority tasks first"
            ]
        }
    return json.dumps(report, indent=2)
def get_overdue_tasks() -> str:
    """Find tasks that have been in progress for more than 7 days.
    JSON list of potentially overdue or stalled tasks"""
    # Return dummy overdue tasks
    overdue_tasks = [
        {
            "id": "task_001",
            "title": "Implement user authentication system",
            "priority": "high",
            "days_stalled": 12
        },
        {
            "id": "task_015",
            "title": "Optimize database queries for reports",
            "priority": "medium",
            "days_stalled": 9
        },
        {
            "id": "task_023",
            "title": "Update API documentation",
            "priority": "low",
            "days_stalled": 15
        }
    ]
    return json.dumps(overdue_tasks, indent=2)
def export_tasks_csv() -> str:
    """Export all tasks in CSV format.
    CSV-formatted string of all tasks"""
    # Return dummy CSV data
    csv_data = """ID,Title,Description,Priority,Status,Created,Updated
task_001,Implement user authentication system,Add login and registration functionality,high,in_progress,2024-01-15T10:00:00Z,2024-01-20T14:30:00Z
task_002,Fix navigation menu bug,Menu items not displaying correctly on mobile,medium,done,2024-01-16T09:15:00Z,2024-01-18T16:45:00Z
task_003,Create landing page design,Design mockups for new homepage,low,todo,2024-01-17T11:30:00Z,2024-01-17T11:30:00Z
task_004,Setup CI/CD pipeline,Configure automated testing and deployment,high,done,2024-01-18T08:00:00Z,2024-01-22T17:20:00Z
task_005,Add search functionality,Implement full-text search across the platform,medium,in_progress,2024-01-19T13:45:00Z,2024-01-25T10:15:00Z
task_006,Write unit tests for API,Increase test coverage to 80%,medium,todo,2024-01-20T15:20:00Z,2024-01-20T15:20:00Z
task_007,Optimize image loading,Implement lazy loading for better performance,low,done,2024-01-21T12:10:00Z,2024-01-24T09:30:00Z
task_008,Update dependencies,Upgrade all npm packages to latest versions,low,done,2024-01-22T16:40:00Z,2024-01-23T11:50:00Z"""
    return csv_data 
def search_tasks(query: str) -> str:
    """Search tasks by title or description using text matching.
    query: Search term to look for in task titles and descriptions
    JSON list of tasks matching the search criteria"""
    query_lower = query.lower()
    matching_tasks = []
    for task in DUMMY_TASKS:
        title = task.get('title', '').lower()
        description = task.get('description', '').lower()
        if query_lower in title or query_lower in description:
            matching_tasks.append(task)
    return json.dumps(matching_tasks, indent=2)
def bulk_update_priority(task_ids: str, new_priority: str) -> str:
    """Update priority for multiple tasks at once.
    task_ids: Comma-separated list of task IDs (e.g., "1,2,3")
    new_priority: New priority level (low, medium, high)
    Summary of the bulk update operation"""
    if not validate_priority(new_priority):
        return f"Invalid priority '{new_priority}'. Must be: low, medium, or high"
    try:
        ids = [int(id_str.strip()) for id_str in task_ids.split(',')]
    except ValueError:
        return "Invalid task IDs format. Use comma-separated integers (e.g., '1,2,3')"
    # Simulate bulk update with dummy data
    updated_count = 0
    not_found = []
    for task_id in ids:
        if any(task.get('id') == task_id for task in DUMMY_TASKS):
            updated_count += 1
        else:
            not_found.append(task_id)
    result = {
        "updated_count": updated_count,
        "not_found_ids": not_found,
        "new_priority": new_priority
    }
    return json.dumps(result, indent=2)
def filter_tasks_by_date(date_filter: str, days: int = 7) -> str:
    """Filter tasks by creation or update date.
    date_filter: Filter type ('created_last', 'updated_last', 'created_before', 'updated_before')
    days: Number of days for the filter (default: 7)
    JSON list of tasks matching the date criteria"""
    cutoff_date = datetime.now() - timedelta(days=days)
    filtered_tasks = []
    for task in DUMMY_TASKS:
        try:
            if date_filter in ['created_last', 'created_before'] and task.get('created_at'):
                task_date = datetime.fromisoformat(task['created_at'].replace('Z', '+00:00'))
                if ((date_filter == 'created_last' and task_date >= cutoff_date) or
                    (date_filter == 'created_before' and task_date < cutoff_date)):
                    filtered_tasks.append(task)
            elif date_filter in ['updated_last', 'updated_before'] and task.get('updated_at'):
                task_date = datetime.fromisoformat(task['updated_at'].replace('Z', '+00:00'))
                if ((date_filter == 'updated_last' and task_date >= cutoff_date) or
                    (date_filter == 'updated_before' and task_date < cutoff_date)):
                    filtered_tasks.append(task)
        except:
            continue
    return json.dumps(filtered_tasks, indent=2)
def count_tasks_by_criteria(criteria: str, value: str) -> str:
    """Count tasks matching specific criteria.
    criteria: What to count by ('status', 'priority', 'created_today', 'updated_today')
    value: Value to match (for status/priority) or ignored for date criteria
    JSON with count information"""
    count = 0
    total_tasks = len(DUMMY_TASKS)
    today = datetime.now().date()
    for task in DUMMY_TASKS:
        if criteria == 'status' and task.get('status', '').lower() == value.lower():
            count += 1
        elif criteria == 'priority' and task.get('priority', '').lower() == value.lower():
            count += 1
        elif criteria == 'created_today' and task.get('created_at'):
            try:
                task_date = datetime.fromisoformat(task['created_at'].replace('Z', '+00:00')).date()
                if task_date == today:
                    count += 1
            except:
                continue
        elif criteria == 'updated_today' and task.get('updated_at'):
            try:
                task_date = datetime.fromisoformat(task['updated_at'].replace('Z', '+00:00')).date()
                if task_date == today:
                    count += 1
            except:
                continue
    result = {
        "criteria": criteria,
        "value": value if criteria in ['status', 'priority'] else 'today',
        "count": count,
        "total_tasks": total_tasks,
        "percentage": round((count / total_tasks * 100), 1) if total_tasks > 0 else 0
    }
    return json.dumps(result, indent=2)
def cleanup_completed_tasks(days_old: int = 30) -> str:
    """Remove completed tasks older than specified days.
    days_old: Remove completed tasks older than this many days (default: 30)
    Summary of cleanup operation"""
    cutoff_date = datetime.now() - timedelta(days=days_old)
    original_count = len(DUMMY_TASKS)
    removed_count = 0
    # Simulate cleanup by counting what would be removed
    for task in DUMMY_TASKS:
        if task.get('status') == 'done' and task.get('updated_at'):
            try:
                updated_date = datetime.fromisoformat(task['updated_at'].replace('Z', '+00:00'))
                if updated_date < cutoff_date:
                    removed_count += 1
            except:
                pass
    remaining_count = original_count - removed_count
    result = {
        "original_task_count": original_count,
        "removed_count": removed_count,
        "remaining_count": remaining_count,
        "cutoff_days": days_old
    }
    return json.dumps(result, indent=2) 

# Create the tabbed Gradio interface
with gr.Blocks() as demo:
    gr.Markdown("# MCP Server Interface")
    gr.Markdown("Multiple function interface for MCP server")
    
    with gr.Tabs():
        with gr.Tab("Create Task"):
            gr.Interface(
                fn=create_task,
                inputs=[
                    gr.Textbox(label="title", placeholder="Enter title..."),
                    gr.Textbox(label="description", placeholder="Enter description..."),
                    gr.Textbox(label="priority", placeholder="Enter priority...")
                ],
                outputs=gr.Textbox(label="Result"),
                title="Create Task",
                description="""Create a new task in the system.

Args:
    title: The task title
    description: Detailed description of the task
    priority: Task priority (low, medium, high)
    
Returns:
    Success message with task ID"""
            )
        with gr.Tab("Get Task"):
            gr.Interface(
                fn=get_task,
                inputs=[
                    gr.Number(label="task_id", value=1, precision=0)
                ],
                outputs=gr.Textbox(label="Result"),
                title="Get Task",
                description="""Retrieve a specific task by ID.

Args:
    task_id: The unique identifier of the task
    
Returns:
    JSON representation of the task or error message"""
            )
        with gr.Tab("List Tasks"):
            gr.Interface(
                fn=list_tasks,
                inputs=[
                    gr.Textbox(label="status", placeholder="Enter status...")
                ],
                outputs=gr.Textbox(label="Result"),
                title="List Tasks",
                description="""List all tasks, optionally filtered by status.

Args:
    status: Filter by status (all, todo, in_progress, done)
    
Returns:
    JSON list of tasks matching the criteria"""
            )
        with gr.Tab("Update Task Status"):
            gr.Interface(
                fn=update_task_status,
                inputs=[
                    gr.Number(label="task_id", value=1, precision=0),
                    gr.Textbox(label="status", placeholder="Enter status...")
                ],
                outputs=gr.Textbox(label="Result"),
                title="Update Task Status",
                description="""Update the status of a specific task.

Args:
    task_id: The unique identifier of the task
    status: New status (todo, in_progress, done)
    
Returns:
    Success or error message"""
            )
        with gr.Tab("Delete Task"):
            gr.Interface(
                fn=delete_task,
                inputs=[
                    gr.Number(label="task_id", value=1, precision=0)
                ],
                outputs=gr.Textbox(label="Result"),
                title="Delete Task",
                description="""Delete a task from the system.

Args:
    task_id: The unique identifier of the task to delete
    
Returns:
    Success or error message"""
            )
        with gr.Tab("Get Task Statistics"):
            gr.Interface(
                fn=get_task_statistics,
                inputs=None,
                outputs=gr.Textbox(label="Result"),
                title="Get Task Statistics",
                description="""Get comprehensive task statistics.

Returns:
    JSON with various task metrics and counts"""
            )
        with gr.Tab("Get Productivity Report"):
            gr.Interface(
                fn=get_productivity_report,
                inputs=[
                    gr.Number(label="days", value=1, precision=0)
                ],
                outputs=gr.Textbox(label="Result"),
                title="Get Productivity Report",
                description="""Generate a productivity report for the specified time period.

Args:
    days: Number of days to analyze (default: 7)
    
Returns:
    JSON productivity report with insights and recommendations"""
            )
        with gr.Tab("Get Overdue Tasks"):
            gr.Interface(
                fn=get_overdue_tasks,
                inputs=None,
                outputs=gr.Textbox(label="Result"),
                title="Get Overdue Tasks",
                description="""Find tasks that have been in progress for more than 7 days.

Returns:
    JSON list of potentially overdue or stalled tasks"""
            )
        with gr.Tab("Export Tasks Csv"):
            gr.Interface(
                fn=export_tasks_csv,
                inputs=None,
                outputs=gr.Textbox(label="Result"),
                title="Export Tasks Csv",
                description="""Export all tasks in CSV format.

Returns:
    CSV-formatted string of all tasks"""
            )
        with gr.Tab("Search Tasks"):
            gr.Interface(
                fn=search_tasks,
                inputs=[
                    gr.Textbox(label="query", placeholder="Enter query...")
                ],
                outputs=gr.Textbox(label="Result"),
                title="Search Tasks",
                description="""Search tasks by title or description using text matching.

Args:
    query: Search term to look for in task titles and descriptions
    
Returns:
    JSON list of tasks matching the search criteria"""
            )
        with gr.Tab("Bulk Update Priority"):
            gr.Interface(
                fn=bulk_update_priority,
                inputs=[
                    gr.Textbox(label="task_ids", placeholder="Enter task_ids..."),
                    gr.Textbox(label="new_priority", placeholder="Enter new_priority...")
                ],
                outputs=gr.Textbox(label="Result"),
                title="Bulk Update Priority",
                description="""Update priority for multiple tasks at once.

Args:
    task_ids: Comma-separated list of task IDs (e.g., "1,2,3")
    new_priority: New priority level (low, medium, high)
    
Returns:
    Summary of the bulk update operation"""
            )
        with gr.Tab("Filter Tasks By Date"):
            gr.Interface(
                fn=filter_tasks_by_date,
                inputs=[
                    gr.Textbox(label="date_filter", placeholder="Enter date_filter..."),
                    gr.Number(label="days", value=1, precision=0)
                ],
                outputs=gr.Textbox(label="Result"),
                title="Filter Tasks By Date",
                description="""Filter tasks by creation or update date.

Args:
    date_filter: Filter type ('created_last', 'updated_last', 'created_before', 'updated_before')
    days: Number of days for the filter (default: 7)
    
Returns:
    JSON list of tasks matching the date criteria"""
            )
        with gr.Tab("Count Tasks By Criteria"):
            gr.Interface(
                fn=count_tasks_by_criteria,
                inputs=[
                    gr.Textbox(label="criteria", placeholder="Enter criteria..."),
                    gr.Textbox(label="value", placeholder="Enter value...")
                ],
                outputs=gr.Textbox(label="Result"),
                title="Count Tasks By Criteria",
                description="""Count tasks matching specific criteria.

Args:
    criteria: What to count by ('status', 'priority', 'created_today', 'updated_today')
    value: Value to match (for status/priority) or ignored for date criteria
    
Returns:
    JSON with count information"""
            )
        with gr.Tab("Cleanup Completed Tasks"):
            gr.Interface(
                fn=cleanup_completed_tasks,
                inputs=[
                    gr.Number(label="days_old", value=1, precision=0)
                ],
                outputs=gr.Textbox(label="Result"),
                title="Cleanup Completed Tasks",
                description="""Remove completed tasks older than specified days.

Args:
    days_old: Remove completed tasks older than this many days (default: 30)
    
Returns:
    Summary of cleanup operation"""
            )

# Launch the interface and MCP server
if __name__ == "__main__":
    # Load server configuration
    import json
    import os
    
    config_file = os.path.join(os.path.dirname(__file__), "..", "config.json")
    try:
        with open(config_file, 'r') as f:
            config = json.load(f)
        server_port = config.get("server_port", 7860)
    except (FileNotFoundError, json.JSONDecodeError):
        server_port = 7860
        print(f"Warning: Could not load config.json, using default port {server_port}")
    
    print(f"🚀 Starting MCP server on port {server_port}")
    print(f"🔨 MCP SSE endpoint: http://127.0.0.1:{server_port}/gradio_api/mcp/sse")
    
    demo.launch(
        server_name="127.0.0.1",
        server_port=server_port,
        mcp_server=True, 
        share=False
    )
